name: Continuous Integration

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }} | ${{ matrix.config.build_type }}
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.container }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Visual Studio 2022
          os: windows-2022
          build_type: RelWithDebInfo
          upload_artifact: true

        - name: Steam Linux Runtime 3.0
          os: ubuntu-latest
          container: 'registry.gitlab.steamos.cloud/steamrt/sniper/sdk:latest'
          extra_options: -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10
          build_type: RelWithDebInfo
          distribute_zmusic: true
          upload_artifact: true

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ -n "${{ matrix.config.deps_cmdline }}" ]]; then
          eval ${{ matrix.config.deps_cmdline }}
        fi
        mkdir build

    - name: Git describe
      id: ghd
      uses: proudust/gh-describe@v2
      continue-on-error: true  # Added a fallback below. It's *only* better than nothing. Maybe do workarounds to run git describe ourselves?

    - name: Configure
      shell: bash
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DPK3_QUIET_ZIPDIR=ON ${{ matrix.config.extra_options }} .

    - name: Build
      shell: bash
      run: |
        if [[ -n "${{ steps.ghd.outputs.describe }}" ]]; then
          export GIT_DESCRIBE="${{ steps.ghd.outputs.describe }}"
        elif [[ "${{ github.ref_type }}" == 'tag' ]]; then
          export GIT_DESCRIBE="${{ github.ref_name }}"
        else
          export GIT_DESCRIBE="${{ github.ref_name }}-g${GITHUB_SHA::7}"
        fi
        echo $GIT_DESCRIBE
        export MAKEFLAGS=--keep-going
        cmake --build build --config ${{ matrix.config.build_type }} --parallel 3

    - name: Create Package
      if: matrix.config.upload_artifact == true  # Remove to make packages of all targets
      shell: bash
      run: |
        cd build
        mkdir package
        if [[ "${{ runner.os }}" == 'Windows' ]]; then
          cp ${{ matrix.config.build_type }}/snapgame.exe ${{ matrix.config.build_type }}/*.pk3 ${{ matrix.config.build_type }}/*.pdb package
        elif [[ "${{ runner.os }}" == 'macOS' ]]; then
          cp -r snapgame.app package
        elif [[ "${{ runner.os }}" == 'Linux' ]]; then
          cp snapgame *.pk3 package
          if [[ "${{ matrix.config.distribute_zmusic }}" == true ]]; then
            cp libzmusic.so.* package
          fi
        fi

    - name: Upload Package
      if: matrix.config.upload_artifact == true  # Remove to store packages of all targets
      uses: actions/upload-artifact@v4
      with:
        path: build/package
        name: ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: List Build Directory
      if: always()
      shell: bash
      run: |
        if [[ "${{ matrix.config.container }}" ]]; then
          git config --system --add safe.directory "$PWD"
        fi
        git status
        ls -lR build
